############################
# OSCLT CONFIGURATION FORMAT
############################

# this is osclt main configuration file, the format is a subset of hocon.
# for full spec of hocon, see "https://github.com/lightbend/config/blob/master/HOCON.md".
#
# the whole config file is an object, may optionally start with '{' and end with '}'.
#
# key and value are separated with '=' or ':', for compatible with tradictional config
# file format, you can use '=' in outest level, and ':' in values of object type:
# log_file = "/path/to/logfile"
#
# key = {
#     a : 3
# }
#
# but this is not mandatory, using which form is up to you.
#
# each key represents a config option name. keys may be '.' separated, which means the
# value will stores in a nested object. for example a.b.c = 3 is equivalent to
#
# a: {
#     b: {
#         c: 3
#     }
# }
# 
# keys may be full or partially double quoted. the following two forms are equivalent:
#
# "debug_level" = "error"
# debug_level = "error"
#
# but if there are dots in qouted keys, the dot will be treated as a normal character.
# a."b.c" = 3 is equivalent to
#
# a: {
#     "b.c": 3
# }
#
# osclt support following value types:
#
# string:   double qouted strings.
# integer:  64bit integer values. value format may be decimal, hexadecimal or octonary. 
# float:    double floating point value. internal is c double type.
# boolean:  boolean type. ether "true" or "false".
# duration: represents the elapsed time between two instants.
#           supported suffix: y, m, d, h, m, s, ms, us, ns.
# object:   dictionary type. map keys to values.
# list:     list of a series values.

#################################
# OSCLT CONFIGURATIONS START HERE
#################################

# hostname will add to all metrics
hostname = ""

# set the default precision.
precision = "second"

# log file path. default is "/var/log/osclt/osclt.conf".
log_file = "/var/log/osclt/osclt.log"

# set max log file size. when log file get the max size, it will rename file
# to "${log_file}.old". if not set or set to 0, osclt will not perform log rotate.
# if you use logrotate(8) manage log files, comment this option.
log_size = 1MB

# set the debug level, default is info. supported values are:
# info, debug, warning, error, fatal.
log_level = "debug"

# log queue size, default is 1000. when log queue size get the max size, osclt will
# drop new coming logs. and print a message to stderr.
log_queue = 1000

# use memory for caching.
cache_memory = true

# cache file path. if cache_memory is true, and this option is set,
# osclt will dump cache data to this file when exiting, and load data
# to memory when it starts again, guarantee no data will lost. if
# cache_memory is false, then use this file for caching overall.
cache_file = "/var/lib/osclt/cache.db"

# these tags will be added to all metrics. for example:
# tags = {
#     region: "hangzhou",
#     service: "database"
# }
tags = {
}

# The socket listener collector options.
collect.socket = {
    unix: {
        file: "/var/run/osclt/ocput.sock",
        mode: 0755
    }
}

# Exec plugin options. exec plugin support the following options:
#
# command:  string type. the command to run.
# interval: duration type. how long does the command run once.
# timeout:  duration type. kill the command if it is still running when exceed this time.
# environment: environment pass to command.
# history:  string type. depends on other metrics, these metrics will pass
#           to the command by it's stdin.
collect.exec = {
    interval: 30s,
    timeout: 30s
    environment: {
        PATH: "/drsdf/aoefj"
    }
}

collect.exec.cpu_usage = {
    command: "cpu_usage -d 300 -i 30",
    interval: "60s",
    history: {
        cpu_basic: {
            time: 5m,
            count: 20
        }
    }
}

collect.exec.dimm_basic = {
    cmd = "dimm_basic",
    interval = 60s
}

cache = {
    max_count: 40,
    max_time: 2d
}

cache.cpu_basic = {
    max_count: 50,
    max_time: 3600s
}

output.influxdb = {
    server = "10.2.3.145"
}
